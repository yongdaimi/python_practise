# 演示python 生成器(生成器函数)的用法

# 如何创建生成器？
# 1. 定义一个以 yield 标识返回值的函数；
# 2. 调用刚创建的函数，即可创建一个生成器 



# 例一： 创建一个数值生成器

def my_num():
    print("开始执行")
    for i in range(8):
        yield i
        print("继续执行")

# 创建一个num 生成器函数
num = my_num()          # 注意，这里只会将生成器函数赋值给num, 但并不会执行my_num()函数体中的代码

print(num.__next__())
print(next(num))

for i in num:
    print(i)

# 有两点需要注意：
# 1. __next__() 与 next() 方法完全等价，next() 内置函数本质上还是调用的是 __next__() 方法
# 2. 使用for 循环遍历生成器，其内部会调用生成器的next()方法

'''
输出：

开始执行
0
继续执行
1
继续执行
2
继续执行
3
继续执行
4
继续执行
5
继续执行
6
继续执行
7
继续执行
'''

print("----------------------------------------")

# 使用生成器创建新的列表和元组

num1 = my_num()
list1 = list(num1)
print(list1)

num2 = my_num()
tuple1 = tuple(num2)
print(tuple1)


'''
输出:

开始执行
继续执行
继续执行
继续执行
继续执行
继续执行
继续执行
继续执行
继续执行
[0, 1, 2, 3, 4, 5, 6, 7]
开始执行
继续执行
继续执行
继续执行
继续执行
继续执行
继续执行
继续执行
继续执行
(0, 1, 2, 3, 4, 5, 6, 7)

'''