# 演示 python类的实例方法、静态方法、类方法

# ====================================================
# 什么是【实例方法】?
# 在类中定义的方法默认就是实例方法
# 实例方法最大的特点就是: 最少要包含一个self参数，用于绑定调用该实例方法的实例对象(python会自动绑定)
# ====================================================

class Person:
    # 构造方法默认也属于实例方法
    def __init__(self):
        print("constructor")

    # 普通的实例方法
    def say_hello(self):
        print("hello, guys")

# 1. 由类对象直接调用一个实例方法
xiaoming = Person()
xiaoming.say_hello()                                # 输出：hello, guys


# 2. 类也可以直接调用实例方法，不过需要把实例对象传入
Person.say_hello(xiaoming)                          # 输出：hello, guys



# ====================================================
# 什么是【类方法】?
# 类方法与实例方法类似，它最少也需要包含一个参数，只不过类方法中通常将其命名为cls, python会自动将该类本身绑定
# 到cls参数(注意：绑定的不是类对象), 也就是说在调用类方法时，不需要显式的为cls参数传参
# ====================================================

class Fruit:

    @classmethod
    def info(cls):
        print(cls, "正在调用类方法")

# 1. 加了@classmethod 修饰符后，python会自动将该方法当做是类方法，而不是实例方法
# 类方法推荐由类直接调用，而不是由类对象进行调用

Fruit.info()                                    # <class '__main__.Fruit'> 正在调用类方法


# 也可以使用类对象进行调用，但不推荐               # <class '__main__.Fruit'> 正在调用类方法
apple = Fruit()
apple.info()


#====================================================
# 什么是【静态方法】
# 静态方法就是通常所说的函数，与函数的唯一区别就是：静态方法是定义在类这个空间(命名空间)，而函数则是定义在
# 程序所在的命名空间中
# 【静态方法】中没有self, cls 这样的参数，因此python解释器不会对它做任何类或对象的绑定，所以在类的静态方法中
# 也无法调用任何类属性和类方法
# ===================================================== 

class Car:
    @staticmethod
    def print_info(name, price):
        print(name, "的价格是：", price)

# 1. 可以直接使用类名调用
Car.print_info("奔驰", "30万")          # 奔驰 的价格是： 30万
Car.print_info("宝马", "20万")          # 宝马 的价格是： 20万

# 2. 也可以使用类对象进行调用
car = Car()
car.print_info("奥迪", "40万")          # 奥迪 的价格是： 40万

